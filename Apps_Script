
// Função principal ativada sempre que ocorre uma edição na planilha
function onEdit(e) {
    try {
        preencherHorario(e); // Preenche automaticamente o horário/dia na primeira coluna
        salvarUltimaCelulaEditada(e); // Salva a última célula editada
    } catch (error) {
        Logger.log("Erro em onEdit: " + error.message);
    }
}

// Salva a última célula editada no armazenamento do documento
function salvarUltimaCelulaEditada(e) {
    try {
        const sheet = e.range.getSheet();
        const range = e.range.getA1Notation();
        const properties = PropertiesService.getDocumentProperties();
        properties.setProperty('LAST_EDITED', sheet.getName() + '!' + range);
    } catch (error) {
        Logger.log("Erro em salvarUltimaCelulaEditada: " + error.message);
    }
}

// Move o foco para a última célula editada ao abrir o documento
function onOpen() {
    try {
        const properties = PropertiesService.getDocumentProperties();
        const lastEdited = properties.getProperty('LAST_EDITED');
        if (lastEdited) {
            const [sheetName, rangeNotation] = lastEdited.split('!');
            const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
            if (sheet) {
                const range = sheet.getRange(rangeNotation);
                sheet.activate();
                range.activate();
            }
        }

        // Gerenciar backup ao abrir
        verificarOuCriarBackupAnual();
    } catch (error) {
        Logger.log("Erro em onOpen: " + error.message);
    }
}

// Preenche a célula na coluna "HORÁRIO" com o dia e horário atual no formato "d - HH:mm"
function preencherHorario(e) {
    try {
        const range = e.range;
        const sheet = e.source.getActiveSheet();
        const row = range.getRow();
        const colunasCriticas = [2, 3, 4];

        const preenchido = colunasCriticas.every(col => sheet.getRange(row, col).getValue().trim() !== "");
        const colunaHorario = 1;

        if (preenchido && sheet.getRange(row, colunaHorario).getValue() === "") {
            const hoje = new Date();
            const diaHora = Utilities.formatDate(hoje, Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm");
            sheet.getRange(row, colunaHorario).setValue(diaHora);
        }
    } catch (error) {
        Logger.log("Erro em preencherHorario: " + error.message);
    }
}

// Cria uma aba para o mês atual, se não existir
function criarAbaMensal() {
    try {
        const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
        const hoje = new Date();
        const nomeAba = Utilities.formatDate(hoje, Session.getScriptTimeZone(), "MM-yyyy");

        if (!spreadsheet.getSheetByName(nomeAba)) {
            const novaAba = spreadsheet.insertSheet(nomeAba);

            const headers = [
                "HORÁRIO", "MOTOBOY", 
                "PAGAMENTO 1", "PLATAFORMA 1", "N° PEDIDO 1",
                "PAGAMENTO 2", "PLATAFORMA 2", "N° PEDIDO 2",
                "PAGAMENTO 3", "PLATAFORMA 3", "N° PEDIDO 3",
                "PAGAMENTO 4", "PLATAFORMA 4", "N° PEDIDO 4",
                "PAGAMENTO 5", "PLATAFORMA 5", "N° PEDIDO 5",
            ];
            novaAba.getRange(1, 1, 1, headers.length).setValues([headers]);
            novaAba.setFrozenRows(1);

            const properties = PropertiesService.getDocumentProperties();
            properties.setProperty('LAST_EDITED', nomeAba + '!A2');

            aplicarValidacaoDados(novaAba);
            aplicarCorCinza(novaAba);
            protegerEstrutura(novaAba);
            formatarNumeroPedidoComoTexto(novaAba);
        }

        // Verifica e executa o backup antes de criar a aba mensal
        verificarOuCriarBackupAnual();

    } catch (error) {
        Logger.log("Erro em criarAbaMensal: " + error.message);
    }
}
// Formata as colunas de "N° PEDIDO" como texto
function formatarNumeroPedidoComoTexto(sheet) {
    try {
        const colunasPedidos = [5, 8, 11, 14, 17]; // Índices das colunas "N° PEDIDO 1, 2, 3, 4, 5"
        colunasPedidos.forEach(coluna => {
            const range = sheet.getRange(2, coluna, sheet.getMaxRows() - 1);
            range.setNumberFormat('@STRING@'); // Formata a coluna como texto
        });

        Logger.log("Colunas de 'N° PEDIDO' formatadas como texto.");
    } catch (error) {
        Logger.log("Erro ao formatar N° PEDIDO como texto: " + error.message);
    }
}

// Aplica validações de dados e cores diretamente às colunas
function aplicarValidacaoDados(sheet) {
    try {
        const motoboys = ["Amanda", "Bob", "Du", "Eltron", "Evandro", "Felipe", "Ferreira", "Heitor", "Jack", "Jonathan", "Melo", "Pallazi", "Rodrigo", "Toca", "Tomas", "Will"];
        const plataformas = ["iFood", "App Yok", "TEL"];
        const pagamentos = ["Pago", "Cartão", "Dinheiro"];

        // Aplicar validação de dados
        aplicarValidacaoColunas(sheet, [2], motoboys);
        aplicarValidacaoColunas(sheet, [4, 7, 10, 13, 16], plataformas);
        aplicarValidacaoColunas(sheet, [3, 6, 9, 12, 15], pagamentos);

        // Aplicar cores manualmente vinculadas às validações
        aplicarCoresPorValor(sheet, [3, 6, 9, 12, 15], { "Pago": "#66FF66", "Cartão": "#4F92FF", "Dinheiro": "#FF3333" });
        aplicarCoresPorValor(sheet, [4, 7, 10, 13, 16], { "iFood": "#FF6666", "App Yok": "#FFCC00", "TEL": "#FF8000" });

        Logger.log("Validações e cores aplicadas com sucesso!");
    } catch (error) {
        Logger.log("Erro em aplicarValidacaoDados: " + error.message);
    }
}

function aplicarValidacaoColunas(sheet, colunas, valores) {
    colunas.forEach(col => {
        const range = sheet.getRange(2, col, sheet.getMaxRows() - 1);
        const regra = SpreadsheetApp.newDataValidation()
            .requireValueInList(valores, true)
            .setAllowInvalid(false)
            .build();
        range.setDataValidation(regra);
    });
}

// Aplica as cores vinculadas às colunas de validação
function aplicarCoresPorValor(sheet, colunas, valoresCores) {
    const maxRows = sheet.getMaxRows() - 1;
    colunas.forEach(coluna => {
        const range = sheet.getRange(2, coluna, maxRows, 1);
        const regras = [];

        for (const valor in valoresCores) {
            const cor = valoresCores[valor];
            const regra = SpreadsheetApp.newConditionalFormatRule()
                .whenTextEqualTo(valor)
                .setBackground(cor)
                .setRanges([range])
                .build();
            regras.push(regra);
        }

        const existingRules = sheet.getConditionalFormatRules();
        sheet.setConditionalFormatRules(existingRules.concat(regras));
    });
}

// Aplica cor cinza para melhorar a visualização
function aplicarCorCinza(sheet) {
    const corCinzaClaro = "#D3D3D3";
    const colunas = [{ start: 3, end: 5 }, { start: 9, end: 11 }, { start: 15, end: 17 }];

    colunas.forEach(({ start, end }) => {
        const range = sheet.getRange(2, start, sheet.getMaxRows() - 1, end - start + 1);
        range.setBackground(corCinzaClaro);
    });
}

// Protege a estrutura da aba
function protegerEstrutura(sheet) {
    const protecao = sheet.protect().setDescription("Proteção da estrutura da tabela");
    protecao.setWarningOnly(false);
    protecao.addEditor(Session.getEffectiveUser());
    const rangeEditavel = sheet.getRange(2, 1, sheet.getMaxRows() - 1, sheet.getMaxColumns());
    protecao.setUnprotectedRanges([rangeEditavel]);
}

// Verifica ou cria arquivo de backup anual e move abas desatualizadas (com backup estático seguro)
function verificarOuCriarBackupAnual() {
    try {
        const agora = new Date();
        const anoAtual = agora.getFullYear();
        const mesAtual = agora.getMonth() + 1; // Janeiro = 1, Fevereiro = 2...

        const nomeBackup = `Backup_${anoAtual}`;
        const arquivos = DriveApp.getFilesByName(nomeBackup);
        const backupPlanilha = arquivos.hasNext()
            ? SpreadsheetApp.open(arquivos.next())
            : SpreadsheetApp.create(nomeBackup);

        const planilhaOriginal = SpreadsheetApp.getActiveSpreadsheet();
        const sheets = planilhaOriginal.getSheets();

        sheets.forEach(sheet => {
            const nomeAba = sheet.getName();
            const match = nomeAba.match(/^(\d{2})-(\d{4})$/);

            if (match) {
                const mesAba = parseInt(match[1], 10);
                const anoAba = parseInt(match[2], 10);

                // Se for do ano passado OU do ano atual mas de meses anteriores, mover
                if (anoAba < anoAtual || (anoAba === anoAtual && mesAba < mesAtual)) {
                    Logger.log(`Movendo aba para backup: ${nomeAba}`);

                    const dados = sheet.getDataRange().getValues();
                    let abaBackup = backupPlanilha.getSheetByName(nomeAba);

                    if (!abaBackup) {
                        abaBackup = backupPlanilha.insertSheet(nomeAba);
                    } else {
                        abaBackup.clear();
                    }

                    abaBackup.getRange(1, 1, dados.length, dados[0].length).setValues(dados);
                    planilhaOriginal.deleteSheet(sheet);

                    Logger.log(`Aba ${nomeAba} movida para o backup.`);
                }
            }
        });

        Logger.log("Backup concluído com sucesso.");
    } catch (error) {
        Logger.log(`Erro em verificarOuCriarBackupAnual: ${error.message}`);
    }
}
